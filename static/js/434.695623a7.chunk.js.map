{"version":3,"file":"static/js/434.695623a7.chunk.js","mappings":"4PAKMA,EAAKC,EAAAA,EAAAA,YAmXX,EAjXe,SAACC,GACZ,OAA8BC,EAAAA,EAAAA,YAAWC,EAAAA,GAAjCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,KACrB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KACA,GAAsCJ,EAAAA,EAAAA,UAAS,IAA/C,eAAOK,EAAP,KAAoBC,EAApB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,IAAnC,eAAOO,EAAP,KAAcC,EAAd,KACA,GAAsCR,EAAAA,EAAAA,UAAS,CAAC,KAAhD,eAAOS,EAAP,KAAoBC,EAApB,KACA,GAA0BV,EAAAA,EAAAA,UAAS,IAAnC,eAAOW,EAAP,KAAcC,EAAd,KACA,GAAoBZ,EAAAA,EAAAA,WAAS,IAAIa,MAAOC,WAAxC,eAAOC,EAAP,KAAWC,EAAX,KACA,GAA0BhB,EAAAA,EAAAA,UAAS,GAAnC,eAAOiB,EAAP,KAAcC,EAAd,KACMC,GAAUC,EAAAA,EAAAA,OAehBC,EAAAA,EAAAA,YAAU,WACF1B,EAAM2B,OAAOC,MAAMzB,EAAYH,EAAM2B,OAAOC,QAEjD,KAEHF,EAAAA,EAAAA,YAAU,WAC6B,IAAD,gBAA9BtB,EAAKyB,eAAe,WACpBtB,EAAQ,UAACH,EAAKE,aAAN,QAAe,IACvBO,EAAQ,UAACT,EAAK0B,oBAAN,QAAsB,IAC9Bf,EAAc,UAACX,EAAKU,mBAAN,QAAqB,CAAC,KACpCL,EAAO,UAACL,EAAKI,YAAN,QAAc,IACrBG,EAAc,UAACP,EAAKM,mBAAN,QAAqB,IACnCO,EAAQ,UAACb,EAAKY,aAAN,QAAe,IACvBK,EAAK,UAACjB,EAAKgB,UAAN,SAAY,IAAIF,MAAOC,WAC5BI,EAAQ,UAACnB,EAAKkB,aAAN,QAAe,MAG5B,CAAClB,IAEJ,IAAM2B,EAAc,SAACC,GACbA,GAAGA,EAAEC,iBACT1B,EAAS,IACTM,EAAS,IACTE,EAAe,CAAC,KAChBJ,EAAe,IACfM,EAAS,IACTR,EAAQ,IACRc,EAAS,IAGPW,EAAU,SAACF,GACbA,EAAEC,iBACF,IAAM7B,EAAO,CACTE,MAAAA,EACAI,YAAAA,EACAI,YAAAA,EACAgB,aAAclB,EACdI,MAAAA,EACAI,GAAAA,EACAE,OAAQA,EACRd,KAAAA,GAGCJ,EAAKE,OACLF,EAAK0B,eACuB,IAA5B1B,EAAKU,YAAYqB,QAAwC,KAAxB/B,EAAKU,YAAY,KAGvDhB,EAAGsC,WAAW,OACTC,IADL,UACYjC,EAAKgB,KACZkB,IAAIlC,GACJmC,MAAK,WACEnC,EAAKgB,IACLI,EAAQgB,KAAK,SAAWpC,EAAKgB,IAEjCW,QAWNU,EAAU,mCAAG,WAAOT,EAAGU,GAAV,6EACf,IACQC,EAAQC,MAAMC,KAAKb,GACnBc,EAAQ,GACNC,EAAahD,EAAAA,EAAAA,UAAciD,MAAMC,MAAM,SACzCC,EAAWC,QAAQC,IACnBT,EAAMU,IAAN,mCAAU,WAAOC,GAAP,8EACAC,EAAUR,EAAWE,MAAMK,EAAKE,MADhC,SAEAD,EAAQE,IAAIH,GAFZ,mBAGNR,EAHM,SAGWS,EAAQG,iBAHnB,wBAGAlB,KAHA,2DAAV,wDAMJU,EAASX,MAAK,WACG,YAATG,EACA7B,EAASiC,EAAM,IACC,SAATJ,GACP3B,GAAe,SAAC4C,GAIZ,MAHiB,KAAbA,EAAM,IACNA,EAAMC,QAEHD,EAAME,OAAOf,SAIlC,MAAOgB,GACLC,QAAQC,MAAMF,GAzBH,2CAAH,wDA4BVG,EAAiB,SAACjC,EAAGkC,EAAOC,GAE9B,OADAnC,EAAEC,iBACY,WAAViC,GACAnD,GAAe,SAACqD,GAAD,OACXA,EAAUC,OAAOD,EAAUC,OAAOD,EAAUE,QAAQH,GAAM,OAE3CpE,EAAAA,EAAAA,UACDwE,WAAWJ,GAAKK,OAAOL,IACxB,QAAVD,EACAnD,GAAe,SAACqD,GAAD,wBAAmBA,GAAnB,CAA8B,aAEpDrD,GAAe,SAACqD,GAAD,OACXA,EAAUC,OACND,EAAUC,OAAOD,EAAUE,QAAQH,GAAM,EAAGD,QAgB5D,OACI,gBAAKO,UAAU,SAAf,UACI,gBAAKA,UAAU,OAAf,UACI,iBAAKA,UAAU,MAAf,WACI,gBAAKA,UAAU,QAAf,UACI,kBAAMC,SAAU,SAAC1C,GAAD,OAAOE,EAAQF,IAA/B,WACI,eAAIyC,UAAU,QAAd,0BACA,gBAAKA,UAAU,MAAf,UACI,iBAAKA,UAAU,MAAf,WACI,4BACI,2CACA,kBACI/B,KAAK,OACLc,KAAK,QACLU,MAAO5D,EACPqE,YAAY,aACZC,SAAU,SAAC5C,GAAD,OAhF9B,SAACA,GACjB,IAAKA,EAAG,OAAOzB,EAAS,IACxB,IAAIsE,EAAW7C,EAAE,GAAG8C,cACpBD,GAAsB7C,EAAE+C,MAAM,GAC9BxE,EAASsE,GA6E+BG,CAAYhD,EAAEiD,OAAOf,QAEzBgB,UAAQ,QAGhB,4BACI,0CACA,kBACIxC,KAAK,OACLc,KAAK,OACLU,MAAO1D,EACPmE,YAAY,YACZC,SAAU,SAAC5C,GAAD,OACNvB,EAAQuB,EAAEiD,OAAOf,cAI7B,4BACI,iDACA,qBACIxB,KAAK,OACLyC,KAAM,GACNC,KAAM,EACN5B,KAAK,cACLU,MAAOxD,EACPiE,YAAY,mBACZC,SAAU,SAAC5C,GAAD,OACNrB,EAAeqB,EAAEiD,OAAOf,cAIpC,4BACI,8CACA,iBAAKO,UAAU,WAAf,WACI,kBACI/B,KAAK,OACLc,KAAK,QACLU,MAAOtD,EACP+D,YAAY,gBACZC,SAAU,SAAC5C,GAAD,OACNnB,EAASmB,EAAEiD,OAAOf,WAG1B,kBACIO,UAAU,cACVY,QAAQ,OAFZ,iCAMA,kBACIC,MAAO,CAAEC,QAAS,QAClB7C,KAAK,OACLtB,GAAG,OACHoC,KAAK,OACLoB,SAAU,SAAC5C,GAAD,OACNS,EACIT,EAAEiD,OAAOtC,MACT,qBAMpB,4BACI,mBACA,kBACI8B,UAAU,cACVY,QAAQ,QAFZ,+BAMA,kBACIC,MAAO,CAAEC,QAAS,QAClB7C,KAAK,OACLtB,GAAG,QACHoC,KAAK,QACLgC,UAAQ,EACRZ,SAAU,SAAC5C,GAAD,OACNS,EACIT,EAAEiD,OAAOtC,MACT,WAIX7B,EAAYuC,KAAI,SAACc,EAAKsB,GAAN,OACb,iBAEIhB,UAAU,WAFd,WAII,kBAEI/B,KAAK,OACLc,KAAK,QACLiB,UAAU,MACVE,YAAY,aACZC,SAAU,SAAC5C,GAAD,OACNiC,EACIjC,EACAA,EAAEiD,OAAOf,MACTC,IAGRD,MAAOC,GAZFsB,IAcT,mBACIC,QAAS,SAAC1D,GAAD,OACLiC,EACIjC,EACA,SACAmC,IALZ,sBAlBKsB,OA+Bb,mBACIhB,UAAU,kBACViB,QAAS,SAAC1D,GAAD,OACLiC,EAAejC,EAAG,QAH1B,yBASJ,mBACA,4BACI,2CACA,kBACIU,KAAK,SACLc,KAAK,QACLU,OAAQ5C,EACRqD,YAAY,aACZC,SAAU,SAAC5C,GAAD,OACNT,GAAUS,EAAEiD,OAAOf,cAK/B,iBACIoB,MAAO,CACHK,SAAU,QACVC,MAAO,cAHf,iCAQA,eACIN,MAAO,CACHO,aAAc,EACdC,YAAa,iBAGrB,gBAAKrB,UAAU,eAAf,SAnTX,CACjB,oBACA,OACA,UACA,cACA,KACA,QACA,SACA,WACA,YACA,YA0S8CpB,KAAI,SAAC0C,EAAMN,GAAP,OACd,4BACI,kBAAOJ,QAASU,EAAhB,SACKA,KAEL,kBACI3E,GAAI2E,EACJvC,KAAMuC,EACNrD,KAAK,WACLkC,SAAU,SAAC5C,GAAD,OAhMtC,SAACA,EAAG+D,GACpB/D,EAAEC,iBACF,IAAI+D,GAAU,OAAOhF,GACjBgF,EAAWC,SAASF,IACpBC,EAAW3B,OAAO2B,EAAW1B,QAAQyB,GAAO,GAC5C9E,EAAS+E,KAETA,EAAWxD,KAAKuD,GAChB9E,EAAS+E,IAyLmCE,CAAYlE,EAAG+D,IAEnB7B,MAAO6B,EACPI,UACS,OAALnF,QAAK,IAALA,IAAAA,EAAOiF,SAASF,QAblBN,OAFiBzE,SAyB3C,mBAAQ0E,QAAS,SAAC1D,GAAD,OAAOD,EAAYC,IAApC,oBAGA,mBACIyC,UAAU,SACV/B,KAAK,SACLgD,QAAS,SAAC1D,GAAD,OAAOE,EAAQF,IAH5B,0BASR,iBAAKyC,UAAU,oBAAf,WACI,iBAAMA,UAAU,OAAhB,SAAwBnE,KACxB,cAAGmE,UAAU,cAAb,SAA4B/D,KAC5B,oBAAS+D,UAAU,WAAnB,UACI,gBAAK2B,IAAKxF,EAAOyF,IAAKzF,kB,+EC3WnC,SAAS0F,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAI3D,MAAM4D,QAAQD,GAAM,OAAO,EAAAE,EAAA,GAAiBF,GDGzC,CAAkBA,IELZ,SAA0BG,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAO9D,MAAMC,KAAK6D,GFInF,CAAgBH,KAAQ,EAAAM,EAAA,GAA2BN,IGLvE,WACb,MAAM,IAAIO,UAAU,wIHIwE","sources":["pages/Create/Create.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { app } from \"../../base\"\r\nimport { cvContext } from \"../../context/catalog/cv-context\"\r\nimport \"../../sass/create.scss\"\r\nconst db = app.firestore()\r\n\r\nconst Create = (props) => {\r\n    const { getPostById, data } = useContext(cvContext)\r\n    const [title, setTitle] = useState(\"\")\r\n    const [link, setLink] = useState(\"\")\r\n    const [description, setDescription] = useState(\"\")\r\n    const [image, setImage] = useState(\"\")\r\n    const [imagesArray, setImagesArray] = useState([\"\"])\r\n    const [stack, setStack] = useState(\"\")\r\n    const [id, setId] = useState(new Date().getTime())\r\n    const [order, setOrder] = useState(0)\r\n    const history = useHistory()\r\n\r\n    const technologies = [\r\n        \"Responsive markup\",\r\n        \"SCSS\",\r\n        \"Flexbox\",\r\n        \"Grid layout\",\r\n        \"JS\",\r\n        \"React\",\r\n        \"jQuery\",\r\n        \"REST API\",\r\n        \"Bootstrap\",\r\n        \"Firebase\",\r\n    ]\r\n\r\n    useEffect(() => {\r\n        if (props.params.post) getPostById(props.params.post)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (data.hasOwnProperty(\"title\")) {\r\n            setTitle(data.title ?? \"\")\r\n            setImage(data.imagePreview ?? \"\")\r\n            setImagesArray(data.imagesArray ?? [\"\"])\r\n            setLink(data.link ?? \"\")\r\n            setDescription(data.description ?? \"\")\r\n            setStack(data.stack ?? [])\r\n            setId(data.id ?? new Date().getTime())\r\n            setOrder(data.order ?? 0)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [data])\r\n\r\n    const clearInputs = (e) => {\r\n        if (e) e.preventDefault()\r\n        setTitle(\"\")\r\n        setImage(\"\")\r\n        setImagesArray([\"\"])\r\n        setDescription(\"\")\r\n        setStack(\"\")\r\n        setLink(\"\")\r\n        setOrder(0)\r\n    }\r\n\r\n    const newItem = (e) => {\r\n        e.preventDefault()\r\n        const data = {\r\n            title,\r\n            description,\r\n            imagesArray,\r\n            imagePreview: image,\r\n            stack,\r\n            id,\r\n            order: +order,\r\n            link,\r\n        }\r\n        if (\r\n            !data.title ||\r\n            !data.imagePreview ||\r\n            (data.imagesArray.length === 1 && data.imagesArray[0] === \"\")\r\n        )\r\n            return\r\n        db.collection(\"All\")\r\n            .doc(`${data.id}`)\r\n            .set(data)\r\n            .then(() => {\r\n                if (data.id) {\r\n                    history.push(\"/post/\" + data.id)\r\n                }\r\n                clearInputs()\r\n            })\r\n    }\r\n\r\n    const handleTitle = (e) => {\r\n        if (!e) return setTitle(\"\")\r\n        let newTitle = e[0].toUpperCase()\r\n        newTitle = newTitle + e.slice(1)\r\n        setTitle(newTitle)\r\n    }\r\n\r\n    const loadImages = async (e, type) => {\r\n        try {\r\n            let files = Array.from(e)\r\n            let links = []\r\n            const storageRef = app.storage().ref().child(\"posts\")\r\n            let requests = Promise.all(\r\n                files.map(async (file) => {\r\n                    const fileRef = storageRef.child(file.name)\r\n                    await fileRef.put(file)\r\n                    links.push(await fileRef.getDownloadURL())\r\n                })\r\n            )\r\n            requests.then(() => {\r\n                if (type === \"preview\") {\r\n                    setImage(links[0])\r\n                } else if (type === \"full\") {\r\n                    setImagesArray((array) => {\r\n                        if (array[0] === \"\") {\r\n                            array.shift()\r\n                        }\r\n                        return array.concat(links)\r\n                    })\r\n                }\r\n            })\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n    }\r\n    const handleImageSet = (e, value, img) => {\r\n        e.preventDefault()\r\n        if (value === \"delete\") {\r\n            setImagesArray((prevArray) =>\r\n                prevArray.splice(prevArray.splice(prevArray.indexOf(img), 1))\r\n            )\r\n            const storageRef = app.storage()\r\n            return storageRef.refFromURL(img).delete(img)\r\n        } else if (value === \"add\") {\r\n            return setImagesArray((prevArray) => [...prevArray, \"\"])\r\n        } else {\r\n            setImagesArray((prevArray) =>\r\n                prevArray.splice(\r\n                    prevArray.splice(prevArray.indexOf(img), 1, value)\r\n                )\r\n            )\r\n        }\r\n    }\r\n    const handleStack = (e, tech) => {\r\n        e.preventDefault()\r\n        let stackClone = [...stack]\r\n        if (stackClone.includes(tech)) {\r\n            stackClone.splice(stackClone.indexOf(tech), 1)\r\n            setStack(stackClone)\r\n        } else {\r\n            stackClone.push(tech)\r\n            setStack(stackClone)\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"create\">\r\n            <div className=\"wrap\">\r\n                <div className=\"row\">\r\n                    <div className=\"block\">\r\n                        <form onSubmit={(e) => newItem(e)}>\r\n                            <h2 className=\"title\">Create item</h2>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <div>\r\n                                        <label>Item title</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            name=\"title\"\r\n                                            value={title}\r\n                                            placeholder=\"Item title\"\r\n                                            onChange={(e) =>\r\n                                                handleTitle(e.target.value)\r\n                                            }\r\n                                            required\r\n                                        />\r\n                                    </div>\r\n                                    <div>\r\n                                        <label>Item link</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            name=\"link\"\r\n                                            value={link}\r\n                                            placeholder=\"Item link\"\r\n                                            onChange={(e) =>\r\n                                                setLink(e.target.value)\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n                                    <div>\r\n                                        <label>Item description</label>\r\n                                        <textarea\r\n                                            type=\"text\"\r\n                                            cols={16}\r\n                                            rows={6}\r\n                                            name=\"description\"\r\n                                            value={description}\r\n                                            placeholder=\"Item description\"\r\n                                            onChange={(e) =>\r\n                                                setDescription(e.target.value)\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n                                    <div>\r\n                                        <label>Preview Image</label>\r\n                                        <div className=\"oneliner\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"image\"\r\n                                                value={image}\r\n                                                placeholder=\"Preview Image\"\r\n                                                onChange={(e) =>\r\n                                                    setImage(e.target.value)\r\n                                                }\r\n                                            />\r\n                                            <label\r\n                                                className=\"btn-outline\"\r\n                                                htmlFor=\"file\"\r\n                                            >\r\n                                                Load preview image\r\n                                            </label>\r\n                                            <input\r\n                                                style={{ display: \"none\" }}\r\n                                                type=\"file\"\r\n                                                id=\"file\"\r\n                                                name=\"file\"\r\n                                                onChange={(e) =>\r\n                                                    loadImages(\r\n                                                        e.target.files,\r\n                                                        \"preview\"\r\n                                                    )\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div>\r\n                                        <hr />\r\n                                        <label\r\n                                            className=\"btn-outline\"\r\n                                            htmlFor=\"files\"\r\n                                        >\r\n                                            Load full images\r\n                                        </label>\r\n                                        <input\r\n                                            style={{ display: \"none\" }}\r\n                                            type=\"file\"\r\n                                            id=\"files\"\r\n                                            name=\"files\"\r\n                                            multiple\r\n                                            onChange={(e) =>\r\n                                                loadImages(\r\n                                                    e.target.files,\r\n                                                    \"full\"\r\n                                                )\r\n                                            }\r\n                                        />\r\n                                        {imagesArray.map((img, index) => (\r\n                                            <div\r\n                                                key={index}\r\n                                                className=\"oneliner\"\r\n                                            >\r\n                                                <input\r\n                                                    key={index}\r\n                                                    type=\"text\"\r\n                                                    name=\"image\"\r\n                                                    className=\"img\"\r\n                                                    placeholder=\"Full Image\"\r\n                                                    onChange={(e) =>\r\n                                                        handleImageSet(\r\n                                                            e,\r\n                                                            e.target.value,\r\n                                                            img\r\n                                                        )\r\n                                                    }\r\n                                                    value={img}\r\n                                                />\r\n                                                <button\r\n                                                    onClick={(e) =>\r\n                                                        handleImageSet(\r\n                                                            e,\r\n                                                            \"delete\",\r\n                                                            img\r\n                                                        )\r\n                                                    }\r\n                                                >\r\n                                                    Delete\r\n                                                </button>\r\n                                            </div>\r\n                                        ))}\r\n                                        <button\r\n                                            className=\"btn btn-outline\"\r\n                                            onClick={(e) =>\r\n                                                handleImageSet(e, \"add\")\r\n                                            }\r\n                                        >\r\n                                            + image\r\n                                        </button>\r\n                                    </div>\r\n                                    <hr />\r\n                                    <div>\r\n                                        <label>Item Order</label>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            name=\"order\"\r\n                                            value={+order}\r\n                                            placeholder=\"Item order\"\r\n                                            onChange={(e) =>\r\n                                                setOrder(+e.target.value)\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <span\r\n                                        style={{\r\n                                            fontSize: \"1.4em\",\r\n                                            color: \"var(--sub)\",\r\n                                        }}\r\n                                    >\r\n                                        Project tech stack\r\n                                    </span>\r\n                                    <hr\r\n                                        style={{\r\n                                            marginBottom: 0,\r\n                                            borderColor: \"var(--sub)\",\r\n                                        }}\r\n                                    />\r\n                                    <div className=\"technologies\" key={stack}>\r\n                                        {technologies.map((tech, index) => (\r\n                                            <div key={index}>\r\n                                                <label htmlFor={tech}>\r\n                                                    {tech}\r\n                                                </label>\r\n                                                <input\r\n                                                    id={tech}\r\n                                                    name={tech}\r\n                                                    type=\"checkbox\"\r\n                                                    onChange={(e) =>\r\n                                                        handleStack(e, tech)\r\n                                                    }\r\n                                                    value={tech}\r\n                                                    checked={\r\n                                                        stack?.includes(tech)\r\n                                                            ? true\r\n                                                            : false\r\n                                                    }\r\n                                                />\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <button onClick={(e) => clearInputs(e)}>\r\n                                reset\r\n                            </button>\r\n                            <button\r\n                                className=\"submit\"\r\n                                type=\"submit\"\r\n                                onClick={(e) => newItem(e)}\r\n                            >\r\n                                Submit\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                    <div className=\"post block fadeIn\">\r\n                        <span className=\"name\">{title}</span>\r\n                        <p className=\"description\">{description}</p>\r\n                        <picture className=\"img-wrap\">\r\n                            <img src={image} alt={image} />\r\n                        </picture>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Create\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["db","app","props","useContext","cvContext","getPostById","data","useState","title","setTitle","link","setLink","description","setDescription","image","setImage","imagesArray","setImagesArray","stack","setStack","Date","getTime","id","setId","order","setOrder","history","useHistory","useEffect","params","post","hasOwnProperty","imagePreview","clearInputs","e","preventDefault","newItem","length","collection","doc","set","then","push","loadImages","type","files","Array","from","links","storageRef","ref","child","requests","Promise","all","map","file","fileRef","name","put","getDownloadURL","array","shift","concat","err","console","error","handleImageSet","value","img","prevArray","splice","indexOf","refFromURL","delete","className","onSubmit","placeholder","onChange","newTitle","toUpperCase","slice","handleTitle","target","required","cols","rows","htmlFor","style","display","multiple","index","onClick","fontSize","color","marginBottom","borderColor","tech","stackClone","includes","handleStack","checked","src","alt","_toConsumableArray","arr","isArray","arrayLikeToArray","iter","Symbol","iterator","unsupportedIterableToArray","TypeError"],"sourceRoot":""}